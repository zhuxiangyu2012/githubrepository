<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="  
    http://www.springframework.org/schema/context  
    http://www.springframework.org/schema/context/spring-context.xsd  
    http://www.springframework.org/schema/beans  
    http://www.springframework.org/schema/beans/spring-beans.xsd  
    http://www.springframework.org/schema/tx  
    http://www.springframework.org/schema/tx/spring-tx.xsd  
    http://www.springframework.org/schema/aop  
    http://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/cache
    http://www.springframework.org/schema/cache/spring-cache-4.2.xsd">
 
 	<context:component-scan base-package="com.komia">
 		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
 	</context:component-scan>
 	
 	 <!-- 装载ehcache配置文件 -->
    <bean id="ehcacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:ehcache.xml"/>
        <property name="shared" value="true"></property>
    </bean>

	<!-- ehcache缓存管理器 -->
    <bean id="springCacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
        <property name="cacheManager" ref="ehcacheManager"/>
        <!-- 开启缓存自动回滚 -->
        <property name="transactionAware" value="true"/>
    </bean>

    <!-- cache注解 -->
    <cache:annotation-driven cache-manager="springCacheManager"/>
 	
 	<!-- 读取properties文件中的数据 -->
	<context:property-placeholder	location="classpath:mybatis/jdbc.properties" />

	<!-- 指定数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
          destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat" />
        <!-- 配置初始化大小、最小、最大 -->
        <property name="maxActive" value="20" />
        <property name="initialSize" value="1" />
        <property name="minIdle" value="1" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxOpenPreparedStatements" value="20" />
    </bean>
	
 	<!-- mybatis文件配置，扫描所有mapper文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		 <property name="dataSource" ref="dataSource" />
		 <property name="mapperLocations">
		  	<array>
	              <value>classpath:com/komia/kmsys/mappers/**/*.xml</value>
	        </array>
		 </property>
		 <property name="typeAliasesPackage" value="com.komia.kmsys.po"></property>
		 <property name="configuration">
		    <bean class="org.apache.ibatis.session.Configuration">
		      <property name="mapUnderscoreToCamelCase" value="true"/>
		    </bean>
		 </property>
	</bean> 
	
	<!-- spring与mybatis整合配置，扫描所有dao，在单数据源的情况下可以不写sqlSessionFactoryBeanName -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <!--  
        basePackage 属性是映射器接口文件的包路径。  
                 你可以使用分号或逗号 作为分隔符设置多于一个的包路径  
        -->  
        <property name="basePackage" value="com.komia.**.dao"/>  
        <!-- 
                 因为会自动装配 SqlSessionFactory和SqlSessionTemplate  
                 所以没 有 必 要 去 指 定 SqlSessionFactory或 SqlSessionTemplate  
                 因此可省略不配置；  
                 但是,如果你使 用了一个 以上的 DataSource，那么自动装配可能会失效。  
                 这种 情况下，你可以使用sqlSessionFactoryBeanName或sqlSessionTemplateBeanName属性来设置正确的 bean名称来使用；  
        -->  
      	<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>  
     </bean>
     
     <!-- 配置Spring的jdbcTemplate 并注入一个dataSource数据源-->
     <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"></property>    
     </bean>
       
     <!-- 配置事务管理器 -->
     <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
     </bean>
     
     <!-- 配置事务通知 -->
     <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED" read-only="false"/>
            <tx:method name="delete*" propagation="REQUIRED" read-only="false"/>
            <tx:method name="update*" propagation="REQUIRED" read-only="false"/>
            <!-- 他方法，使用如下事务配置 -->
            <tx:method name="*" propagation="NOT_SUPPORTED" read-only="true"/>
        </tx:attributes>
     </tx:advice>
     
     <!-- 配置aop -->
    <aop:config>
        <!-- 配置切入点表达式 -->
        <aop:pointcut id="komiaPointCut" expression="execution(* com.komia..*.service.*.*(..))"></aop:pointcut>
        <!-- 建立切入点表达式和事务的对相应关系 -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="komiaPointCut"></aop:advisor>
    </aop:config>
</beans>  